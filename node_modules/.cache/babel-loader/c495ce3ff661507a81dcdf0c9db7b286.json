{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport FrogCard from \"./components/FrogCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\"; // import Title from \"./components/Title\";\n\nimport frogs from \"./frogs.json\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      frogs: frogs,\n      score: 0,\n      highScore: 0,\n      alert: \"Good luck. Ribbit.\"\n    };\n\n    _this.handleIncrement = function () {\n      // We always use the setState method to update a component's state\n      _this.setState({\n        score: _this.state.score + 1\n      });\n    };\n\n    _this.randomizeCards = function () {\n      var currentCards = _this.state.frogs.slice();\n\n      var newIndex = _this.state.frogs.length;\n      var randomIndex = 0;\n      var shuffledCards = {}; // Assign new indices to the cards to shuffle them\n\n      while (newIndex) {\n        randomIndex = Math.floor(Math.random() * newIndex--);\n        shuffledCards = currentCards[newIndex];\n        currentCards[newIndex] = currentCards[randomIndex];\n        currentCards[randomIndex] = shuffledCards;\n      }\n\n      _this.setState({\n        frogs: currentCards\n      });\n\n      return frogs;\n    };\n\n    _this.resetGame = function () {\n      var resetCards = _this.state.frogs.map(function (frogs) {\n        frogs.clicked = false;\n        return cards;\n      });\n\n      _this.setState({\n        score: 0,\n        frogs: resetCards\n      });\n    };\n\n    _this.handleBtnClick = function (id) {\n      var newState = _objectSpread({}, _this.state);\n\n      var chosenCard = newState.frogs.map(function (chosen) {\n        if (chosen.id === id) {\n          //If the card has not been clicked...\n          if (chosen.clicked === false) {\n            // Alert user and shuffle cards\n            _this.setState({\n              alert: \"Nice job!\"\n            }); //Increment score by 1\n\n\n            _this.handleIncrement();\n\n            return chosen;\n          } else if ( // If the card has already been clicked...\n          chosen.clicked === true) {\n            // Alert user the card has already been clicked, reset the game\n            _this.setState({\n              alert: \"Oops, you already clicked that one! Croooaak\"\n            });\n\n            _this.resetGame();\n\n            return chosen;\n          }\n\n          ; //Check highscore against current score and update\n\n          if (newState.score >= newState.highScore) {\n            _this.setState({\n              highScore: newState.score\n            });\n          } //If the correct answer is the final guess, the user wins. Reset game\n\n\n          if (newState.score + 1 === newState.frogs.length) {\n            _this.setState({\n              alert: \"You win! Ribbit Ribbit!\"\n            });\n\n            _this.resetGame();\n\n            return chosen;\n          }\n\n          chosen.clicked = true;\n        }\n\n        return chosen;\n      }); //Update the chosen card and shuffle the cards\n\n      _this.setState({\n        frogs: chosenCard\n      });\n\n      _this.randomizeCards();\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // When the component mounts, load the cards to be displayed\n    value: function componentDidMount() {\n      this.randomizeCards();\n    } // handleIncrement increases this.state.count by 1\n\n  }, {\n    key: \"render\",\n    // handleBtnClick = id => {\n    //   // Filter this.state.frogs for frogs with an id not equal to the id being removed\n    //   const frogs = this.state.frogs.filter(frog => frog.id !== id);\n    //   // Set this.state.frogs equal to the new frogs array\n    //   this.setState({ frogs });\n    // };\n    // Map over this.state.frogs and render a frogCard component for each frog object\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        score: this.state.score,\n        highScore: this.state.highScore,\n        alert: this.state.alert,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), this.state.frogs.map(function (frog) {\n        return React.createElement(FrogCard, {\n          handleBtnClick: _this2.handleBtnClick,\n          id: frog.id,\n          key: frog.id,\n          image: frog.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Nutishia\\Desktop\\coursework\\github\\Homework\\clicky-game\\src\\App.js"],"names":["React","Component","FrogCard","Wrapper","Navbar","frogs","App","state","score","highScore","alert","handleIncrement","setState","randomizeCards","currentCards","slice","newIndex","length","randomIndex","shuffledCards","Math","floor","random","resetGame","resetCards","map","clicked","cards","handleBtnClick","id","newState","chosenCard","chosen","frog","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FrogCard from \"./components/FrogCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\n// import Title from \"./components/Title\";\nimport frogs from \"./frogs.json\";\nimport \"./App.css\";\n\n  class App extends Component {\n    state = {\n      frogs: frogs,\n      score: 0,\n      highScore: 0,\n      alert: \"Good luck. Ribbit.\"\n    };\n  \n    // When the component mounts, load the cards to be displayed\n    componentDidMount() {\n      this.randomizeCards();\n    }\n  \n     // handleIncrement increases this.state.count by 1\n    handleIncrement = () => {\n      // We always use the setState method to update a component's state\n      this.setState({ score: this.state.score + 1 });\n    };\n\n    randomizeCards = () => {\n      const currentCards = this.state.frogs.slice();\n      let newIndex = this.state.frogs.length;\n      let randomIndex = 0;\n      let shuffledCards = {};\n  \n      // Assign new indices to the cards to shuffle them\n      while (newIndex) {\n        randomIndex = Math.floor(Math.random() * newIndex--);\n        shuffledCards = currentCards[newIndex];\n        currentCards[newIndex] = currentCards[randomIndex];\n        currentCards[randomIndex] = shuffledCards;\n      }\n      this.setState({\n        frogs: currentCards,\n      });\n      return frogs;\n    }\n  \n    // Return score to zero and all cards to a \"clicked\" value of false.\n    resetGame = () => {\n      const resetCards = this.state.frogs.map(frogs => {\n        frogs.clicked = false;\n        return cards;\n      });\n      this.setState({\n        score: 0,\n        frogs: resetCards\n      });\n    }\n  \n  //When a card is clicked... (takes in the id)\n    handleBtnClick = (id) => {\n      const newState = { ...this.state };\n      const chosenCard = newState.frogs.map(chosen => {\n        if (chosen.id === id) {\n          \n          //If the card has not been clicked...\n          if (chosen.clicked === false) {\n            // Alert user and shuffle cards\n            this.setState({ alert: \"Nice job!\" });\n            //Increment score by 1\n            this.handleIncrement();\n            return chosen;\n          \n         } else if\n          // If the card has already been clicked...\n          (chosen.clicked === true) {\n            // Alert user the card has already been clicked, reset the game\n            this.setState({ alert: \"Oops, you already clicked that one! Croooaak\" });\n            this.resetGame();\n            return chosen;\n          };\n          \n          //Check highscore against current score and update\n          if (newState.score >= newState.highScore) {\n            this.setState({ highScore: newState.score });\n          }\n  \n          //If the correct answer is the final guess, the user wins. Reset game\n          if ((newState.score + 1) === newState.frogs.length) {\n            this.setState({ alert: \"You win! Ribbit Ribbit!\" });\n            this.resetGame();\n            return chosen;\n          } \n          chosen.clicked = true;\n        }\n        return chosen;\n      })\n      //Update the chosen card and shuffle the cards\n      this.setState({ frogs: chosenCard });\n      this.randomizeCards();\n    }\n\n  // handleBtnClick = id => {\n  //   // Filter this.state.frogs for frogs with an id not equal to the id being removed\n  //   const frogs = this.state.frogs.filter(frog => frog.id !== id);\n  //   // Set this.state.frogs equal to the new frogs array\n  //   this.setState({ frogs });\n  // };\n\n  // Map over this.state.frogs and render a frogCard component for each frog object\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n        score={this.state.score}\n        highScore={this.state.highScore}\n        alert={this.state.alert}\n        />\n        {this.state.frogs.map(frog => (\n          <FrogCard\n            handleBtnClick={this.handleBtnClick}\n            id={frog.id}\n            key={frog.id}\n            image={frog.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Card from \"./components/Card\"; // import Alert from \"../components/Alert\";\n// import Col from \"../components/Col\";\n// import Row from \"../components/Row\";\n\nimport frogs from \"./cards.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cards: frogs,\n      score: 0,\n      highScore: 0,\n      alert: \"Good luck. Ribbit.\"\n    };\n\n    _this.randomizeCards = function () {\n      var currentCards = _this.state.frogs.slice();\n\n      var newIndex = _this.state.frogs.length;\n      var randomIndex = 0;\n      var shuffledCards = {}; // Assign new indices to the cards to shuffle them\n\n      while (newIndex) {\n        randomIndex = Math.floor(Math.random() * newIndex--);\n        shuffledCards = currentCards[newIndex];\n        currentCards[newIndex] = currentCards[randomIndex];\n        currentCards[randomIndex] = shuffledCards;\n      }\n\n      _this.setState({\n        frogs: currentCards\n      });\n\n      return frogs;\n    };\n\n    _this.resetGame = function () {\n      var resetCards = _this.state.frogs.map(function (cards) {\n        cards.clicked = false;\n        return cards;\n      });\n\n      _this.setState({\n        score: 0,\n        frogs: resetCards\n      });\n    };\n\n    _this.handleBtnClick = function (id) {\n      var newState = _objectSpread({}, _this.state);\n\n      var chosenCard = newState.frogs.map(function (chosen) {\n        if (chosen.id === id) {\n          //If the card has not been clicked...\n          if (chosen.clicked === false) {\n            // Alert user and shuffle cards\n            _this.setState({\n              alert: \"Nice job!\"\n            }); //Increment score by 1\n\n\n            _this.setState({\n              score: newState.score + 1\n            });\n\n            return chosen;\n          } else if ( // If the card has already been clicked...\n          chosen.clicked === true) {\n            // Alert user the card has already been clicked, reset the game\n            _this.setState({\n              alert: \"Oops, you already clicked that one! Croooaak\"\n            });\n\n            _this.resetGame();\n\n            return chosen;\n          }\n\n          ; //Check highscore against current score and update\n\n          if (newState.score >= newState.highScore) {\n            _this.setState({\n              highScore: newState.score\n            });\n          } //If the correct answer is the final guess, the user wins. Reset game\n\n\n          if (newState.score + 1 === newState.frogs.length) {\n            _this.setState({\n              alert: \"You win! Ribbit Ribbit!\"\n            });\n\n            _this.resetGame();\n\n            return chosen;\n          }\n\n          chosen.clicked = true;\n        }\n\n        return chosen;\n      }); //Update the chosen card and shuffle the cards\n\n      _this.setState({\n        frogs: chosenCard\n      });\n\n      _this.randomizeCards();\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // When the component mounts, load the cards to be displayed\n    value: function componentDidMount() {\n      console.log(\"Component mounted\");\n      this.randomizeCards();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.state.frogs.map(function (data) {\n        return React.createElement(Card, {\n          data: data.id,\n          key: data.id,\n          src: data.image,\n          handleBtnClick: _this2.handleBtnClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        });\n      }), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;\n/* <Navbar>\nscore={this.state.score}\nhighScore={this.state.highScore}\nalert={this.state.alert}\n</Navbar> */","map":{"version":3,"sources":["C:\\Users\\Nutishia\\Desktop\\coursework\\github\\Homework\\clicky-game\\src\\App.js"],"names":["React","Component","Navbar","Footer","Wrapper","Card","frogs","App","state","cards","score","highScore","alert","randomizeCards","currentCards","slice","newIndex","length","randomIndex","shuffledCards","Math","floor","random","setState","resetGame","resetCards","map","clicked","handleBtnClick","id","newState","chosenCard","chosen","console","log","data","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport Card from \"./components/Card\";\n// import Alert from \"../components/Alert\";\n// import Col from \"../components/Col\";\n// import Row from \"../components/Row\";\nimport frogs from \"./cards.json\";\n\nclass App extends Component {\n  state = {\n    cards: frogs,\n    score: 0,\n    highScore: 0,\n    alert: \"Good luck. Ribbit.\"\n  };\n\n  // When the component mounts, load the cards to be displayed\n  componentDidMount() {\n    console.log(\"Component mounted\");\n    this.randomizeCards();\n  }\n\n  randomizeCards = () => {\n    const currentCards = this.state.frogs.slice();\n    let newIndex = this.state.frogs.length;\n    let randomIndex = 0;\n    let shuffledCards = {};\n\n    // Assign new indices to the cards to shuffle them\n    while (newIndex) {\n      randomIndex = Math.floor(Math.random() * newIndex--);\n      shuffledCards = currentCards[newIndex];\n      currentCards[newIndex] = currentCards[randomIndex];\n      currentCards[randomIndex] = shuffledCards;\n    }\n    this.setState({\n      frogs: currentCards,\n    });\n    return frogs;\n  }\n\n  // Return score to zero and all cards to a \"clicked\" value of false.\n  resetGame = () => {\n    const resetCards = this.state.frogs.map(cards => {\n      cards.clicked = false;\n      return cards;\n    });\n    this.setState({\n      score: 0,\n      frogs: resetCards\n    });\n  }\n\n//When a card is clicked... (takes in the id)\n  handleBtnClick = (id) => {\n    const newState = { ...this.state };\n    const chosenCard = newState.frogs.map(chosen => {\n      if (chosen.id === id) {\n        \n        //If the card has not been clicked...\n        if (chosen.clicked === false) {\n          // Alert user and shuffle cards\n          this.setState({ alert: \"Nice job!\" });\n          //Increment score by 1\n          this.setState({ score: newState.score + 1 });\n          return chosen;\n        \n       } else if\n        // If the card has already been clicked...\n        (chosen.clicked === true) {\n          // Alert user the card has already been clicked, reset the game\n          this.setState({ alert: \"Oops, you already clicked that one! Croooaak\" });\n          this.resetGame();\n          return chosen;\n        };\n        \n        //Check highscore against current score and update\n        if (newState.score >= newState.highScore) {\n          this.setState({ highScore: newState.score });\n        }\n\n        //If the correct answer is the final guess, the user wins. Reset game\n        if ((newState.score + 1) === newState.frogs.length) {\n          this.setState({ alert: \"You win! Ribbit Ribbit!\" });\n          this.resetGame();\n          return chosen;\n        } \n        chosen.clicked = true;\n      }\n      return chosen;\n    })\n    //Update the chosen card and shuffle the cards\n    this.setState({ frogs: chosenCard });\n    this.randomizeCards();\n  }\n\n  render() {\n    return (\n        <Wrapper>\n         \n          \n          {this.state.frogs.map(data => (\n              <Card \n                data={data.id} \n                key={data.id}\n                src={data.image}\n                handleBtnClick={this.handleBtnClick}\n              />\n            ))}\n\n          <Footer/>\n        </Wrapper>\n      );\n   }\n}\n\nexport default App;\n\n/* <Navbar>\nscore={this.state.score}\nhighScore={this.state.highScore}\nalert={this.state.alert}\n</Navbar> */"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Nutishia\\\\Desktop\\\\coursework\\\\github\\\\Homework\\\\clicky-game\\\\src\\\\pages\\\\home.js\";\nimport React, { Component } from \"react\";\nimport Card from \"../components/Card\";\nimport Alert from \"../components/Alert\";\nimport Col from \"../components/Col\";\nimport Row from \"../components/Row\";\nimport frogs from \"../cards.json\";\n\nvar Home =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Home, _Component);\n\n  function Home() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Home);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Home)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cards: frogs,\n      score: 0,\n      highScore: 0,\n      notification: \"Good luck. Ribbit.\"\n    };\n\n    _this.randomizeCards = function () {\n      var currentCards = _this.state.frogs.slice();\n\n      var newIndex = _this.state.frogs.length;\n      var randomIndex = 0;\n      var shuffledCards = {}; // Assign new indices to the cards to shuffle them\n\n      while (newIndex) {\n        randomIndex = Math.floor(Math.random() * newIndex--);\n        shuffledCards = currentCards[newIndex];\n        currentCards[newIndex] = currentCards[randomIndex];\n        currentCards[randomIndex] = shuffledCards;\n      }\n\n      _this.setState({\n        frogs: currentCards\n      });\n\n      return frogs;\n    };\n\n    _this.resetGame = function () {\n      var resetCards = _this.state.frogs.map(function (cards) {\n        cards.clicked = false;\n        return cards;\n      });\n\n      _this.setState({\n        score: 0,\n        frogs: resetCards\n      });\n    };\n\n    _this.handleBtnClick = function (id) {\n      var newState = _objectSpread({}, _this.state);\n\n      var chosenCard = newState.frogs.map(function (chosen) {\n        if (chosen.id === id) {\n          // If the card has already been clicked...\n          if (chosen.clicked === true) {\n            // Alert user the card has already been clicked, reset the gaame and shuffle cards\n            _this.setState({\n              notification: \"Oops, you already clicked that one! Croooaak\"\n            });\n\n            _this.resetGame();\n\n            _this.randomizeCards();\n\n            return chosen;\n          } //If the card has not been clicked...\n          else if (chosen.clicked === false) {\n              // Alert user the card has already been clicked, reset the gaame and shuffle cards\n              _this.setState({\n                notification: \"Nice job!\"\n              });\n\n              _this.randomizeCards();\n\n              return chosen;\n            } //Increment score by 1\n\n\n          _this.setState({\n            score: newState.score + 1\n          }); //Check highscore against current score and update\n\n\n          if (newState.score >= newState.highScore) {\n            _this.setState({\n              highScore: newState.score\n            });\n          }\n\n          if (newState.score + 1 === newState.frogs.length) {\n            _this.setState({\n              notification: \"You win! Ribbit Ribbit!\"\n            });\n\n            _this.resetGame();\n\n            _this.randomizeCards();\n\n            return chosen;\n          }\n\n          chosen.clicked = true;\n        }\n\n        return chosen;\n      });\n\n      _this.setState({\n        frogs: chosenCard\n      });\n\n      _this.randomizeCards();\n    };\n\n    return _this;\n  }\n\n  _createClass(Home, [{\n    key: \"componentDidMount\",\n    // When the component mounts, load the cards to be displayed\n    value: function componentDidMount() {\n      this.randomizeCards();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Click on every image once to earn points. Just don't click on any more than once!\"), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Card, {\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(Card, {\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      })), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Card, {\n        image: this.state.image,\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Card, {\n        image: this.state.image,\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Card, {\n        image: this.state.image,\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(Card, {\n        image: this.state.image,\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      })), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(Card, {\n        image: this.state.image,\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(Card, {\n        image: this.state.image,\n        handleBtnClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }))), React.createElement(\"h1\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Your Score: \", this.state.score), React.createElement(Alert, {\n        style: {\n          opacity: this.state.match ? 1 : 0\n        },\n        type: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Nice job! You got that one correct!\"));\n    }\n  }]);\n\n  return Home;\n}(Component);\n\nexport default Home;","map":{"version":3,"sources":["C:\\Users\\Nutishia\\Desktop\\coursework\\github\\Homework\\clicky-game\\src\\pages\\home.js"],"names":["React","Component","Card","Alert","Col","Row","frogs","Home","state","cards","score","highScore","notification","randomizeCards","currentCards","slice","newIndex","length","randomIndex","shuffledCards","Math","floor","random","setState","resetGame","resetCards","map","clicked","handleBtnClick","id","newState","chosenCard","chosen","image","opacity","match"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"../components/Card\";\nimport Alert from \"../components/Alert\";\nimport Col from \"../components/Col\";\nimport Row from \"../components/Row\";\nimport frogs from \"../cards.json\";\n\nclass Home extends Component {\n  state = {\n    cards: frogs,\n    score: 0,\n    highScore: 0,\n    notification: \"Good luck. Ribbit.\"\n  };\n\n  // When the component mounts, load the cards to be displayed\n  componentDidMount() {\n    this.randomizeCards();\n  }\n\n  randomizeCards = () => {\n    const currentCards = this.state.frogs.slice();\n    let newIndex = this.state.frogs.length;\n    let randomIndex = 0;\n    let shuffledCards = {};\n\n    // Assign new indices to the cards to shuffle them\n    while (newIndex) {\n      randomIndex = Math.floor(Math.random() * newIndex--);\n      shuffledCards = currentCards[newIndex];\n      currentCards[newIndex] = currentCards[randomIndex];\n      currentCards[randomIndex] = shuffledCards;\n    }\n    this.setState({\n      frogs: currentCards,\n    });\n    return frogs;\n  }\n\n  // Return score to zero and all cards to a \"clicked\" value of false.\n  resetGame = () => {\n    const resetCards = this.state.frogs.map(cards => {\n      cards.clicked = false;\n      return cards;\n    });\n    this.setState({\n      score: 0,\n      frogs: resetCards\n    });\n  }\n\n\n  handleBtnClick = (id) => {\n    const newState = { ...this.state };\n    const chosenCard = newState.frogs.map(chosen => {\n      if (chosen.id === id) {\n        // If the card has already been clicked...\n        if (chosen.clicked === true) {\n          // Alert user the card has already been clicked, reset the gaame and shuffle cards\n          this.setState({notification: \"Oops, you already clicked that one! Croooaak\"});\n          this.resetGame();\n          this.randomizeCards();\n          return chosen;\n        } \n        //If the card has not been clicked...\n        else if (chosen.clicked === false) {\n          // Alert user the card has already been clicked, reset the gaame and shuffle cards\n          this.setState({notification: \"Nice job!\"});\n          this.randomizeCards();\n          return chosen;\n        }\n        //Increment score by 1\n        this.setState({\n          score: newState.score + 1\n        });\n        \n        //Check highscore against current score and update\n        if (newState.score >= newState.highScore) {\n          this.setState({\n            highScore: newState.score\n          });\n        }\n\n        if ((newState.score + 1) === newState.frogs.length) {\n          this.setState({notification: \"You win! Ribbit Ribbit!\"});\n          this.resetGame();\n          this.randomizeCards();\n          return chosen;\n        } \n        chosen.clicked = true;\n      }\n      return chosen;\n    })\n    this.setState({\n      frogs: chosenCard,\n    });\n    this.randomizeCards();\n  }\n\n  render() {\n    return (\n      <div>\n         <h5 className=\"text-center\">\n          Click on every image once to earn points. Just don't click on any more than once!\n        </h5>\n        <Row>\n        <Col></Col>\n          <Col>\n          <Card handleBtnClick={this.handleBtnClick} />\n          <Card handleBtnClick={this.handleBtnClick} />  \n          </Col>\n          <Col>\n          <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />\n          <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />  \n          </Col>\n          <Col>\n          <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />\n          <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />  \n          </Col>\n          <Col>\n          <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />\n          <Card image={this.state.image} handleBtnClick={this.handleBtnClick} />  \n          </Col>\n        </Row>\n        <h1 className=\"text-center\">\n         Your Score: {this.state.score}\n        </h1>\n        <Alert style={{ opacity: this.state.match ? 1 : 0 }} type=\"success\">\n          Nice job! You got that one correct!\n        </Alert>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}